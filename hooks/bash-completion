# Modified version of what `composer _completion -g -p composer` generates
# Composer will only load plugins when a valid composer.json is in its working directory,
# so  for this hack to work, we are always running the completion command in ~/.composer
function _composercomplete {
    local CMDLINE_CONTENTS="$COMP_LINE";
    local CMDLINE_CURSOR_INDEX="$COMP_POINT";
    local CMDLINE_WORDBREAKS="$COMP_WORDBREAKS";

    export CMDLINE_CONTENTS CMDLINE_CURSOR_INDEX CMDLINE_WORDBREAKS;

    # Run using the program being completed
    local COMPOSER_CWD="$PWD";
    local composer="$1"

    # Query and cache where the global composer.json lives
    if [ -z "$_composer_config_dir" ]; then
        _composer_config_dir="$($composer config home --global)"
    fi

    local RESULT STATUS;

    local IFS=$'\n';

    RESULT="$(cd "$_composer_config_dir" && $composer depends _completion --shell-type bash </dev/null)";
    STATUS=$?;

    local cur mail_check_backup;

    mail_check_backup=$MAILCHECK;
    MAILCHECK=-1;

    _get_comp_words_by_ref -n : cur;

    if [ $STATUS -eq 200 ]; then
        compopt -o default;
        return 0;

    elif [ $STATUS -ne 0 ]; then
        echo -e "$RESULT";
        return $?;
    fi;

    COMPREPLY=(`compgen -W "$RESULT" -- $cur`);

    __ltrim_colon_completions "$cur";

    MAILCHECK=mail_check_backup;
};

if [ "$(type -t _get_comp_words_by_ref)" == "function" ]; then
    complete -F _composercomplete composer;
else
    >&2 echo "Completion was not registered for composer:";
    >&2 echo "The 'bash-completion' package is required but doesn't appear to be installed.";
fi;
